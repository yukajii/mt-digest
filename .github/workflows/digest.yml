name: MT Digest           # (file path: .github/workflows/mt_digest.yml)

# ── triggers ────────────────────────────────────────────────────────────
on:
  workflow_dispatch:
    inputs:
      date:
        description: "UTC date to fetch (YYYY-MM-DD). Leave blank for automatic (≈4 arXiv business days ago)."
        required: false
        type: string
  schedule:
    - cron: "20 6 * * *"   # daily 06:20 UTC

permissions:
  contents: write          # so we could push in the future if desired

# ── job ─────────────────────────────────────────────────────────────────
jobs:
  digest:
    runs-on: ubuntu-latest

    steps:
      # 1. checkout ------------------------------------------------------
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. cache wheels / HF models / torch -----------------------------
      - name: Cache pip & models
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/huggingface
            ~/.cache/torch
          key: ${{ runner.os }}-mt-digest-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-mt-digest-

      # 3. Python --------------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      # 4. capture DATE if provided -------------------------------------
      - name: Capture DATE input (optional)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.date != ''
        run: echo "DATE=${{ github.event.inputs.date }}" >>"$GITHUB_ENV"

      # 5. build + send --------------------------------------------------
      - name: Build and send digest
        env:
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          BUTTONDOWN_TOKEN: ${{ secrets.BUTTONDOWN_TOKEN }}
        run: |
          set -euo pipefail

          if [[ -n "${DATE:-}" ]]; then
            echo "Running for explicit date $DATE"
            python mt_arxiv_digest.py "$DATE"
            MD_FILE="mt_digest_${DATE}.md"
          else
            echo "Running in automatic date mode"
            python mt_arxiv_digest.py            # ← no args → automatic date
            MD_FILE=$(ls mt_digest_*.md | sort | tail -n1)
          fi
          echo "MD_FILE=$MD_FILE" >>"$GITHUB_ENV"

          python send_digest.py "$MD_FILE"

      # 6. artefacts (private, 30 d retention) ---------------------------
      - name: Upload Markdown digest
        uses: actions/upload-artifact@v4
        with:
          name: mt_digest_md-${{ env.MD_FILE }}
          path: ${{ env.MD_FILE }}
          retention-days: 30

      - name: Upload JSON log
        uses: actions/upload-artifact@v4
        with:
          name: mt_digest_log
          path: logs/*.log
          retention-days: 30
